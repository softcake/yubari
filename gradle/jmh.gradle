/*
 *
 * Copyright 2018 softcake.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'idea'
apply plugin: "io.morethan.jmhreport"

sourceSets {
    jmh {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file("src/jmh/java")

            jmh.runtimeClasspath += jmh.output
        }
        resources.srcDir file("src/jmh/resources")
    }
}

dependencies {
    //jmhApi project
    jmhImplementation 'org.openjdk.jmh:jmh-core:1.20'
    jmhImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.20'
}

configurations {
    jmhImplementation.extendsFrom testImplementation
    jmhRuntimeOnly.extendsFrom testRuntimeOnly
}

idea {
    module {
        testSourceDirs += file("src/jmh/java")
        scopes.TEST.plus += [configurations.jmhRuntimeClasspath, configurations.jmhCompileClasspath]
    }
}

jmhReport {
    jmhResultPath = project.file('build/reports/jmh/result.json')
    jmhReportOutput = project.file('build/reports/jmh')
}

task jmh(type: JavaExec, description: 'Executing JMH benchmarks', group:'Development') {

    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    def include = project.properties.get('include', '')
    def exclude = project.properties.get('exclude')
    def format = project.properties.get('format', 'json')
    def profilers = project.properties.get('profilers')
    def jvmArgs = project.properties.get('jvmArgs')

    def resultFile = file("build/reports/jmh/result.${format}")

    resultFile.parentFile.mkdirs()

    args include

    if(exclude) {

        args '-e', exclude

    }

    args '-foe', 'true'   //fail-on-error
    args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]

    if(profilers) {
        profilers.split(',').each {
            args '-prof', it
        }
    }

    args '-jvmArgsPrepend', '-Xmx512m'
    args '-jvmArgsPrepend', '-Xms512m'

    if(jvmArgs) {
        for(jvmArg in jvmArgs.split(' ')) {
            args '-jvmArgsPrepend', jvmArg
        }

    }

    args '-rf', format
    args '-rff', resultFile


    doFirst {
        println "\nExecuting JMH with: $args \n"
    }

}
tasks.jmh.finalizedBy tasks.jmhReport

task ('jmhHelp', description:'Print help for the jmh task', group: 'Development') {

    doLast {

        println ""
        println "Usage of jmh tasks:"
        println "~~~~~~~~~~~~~~~~~~~~~~~~~~~"

        println "Only execute specific benchmark(s):"
        println "\tgw jmh -Pinclude=\".*MyBenchmark.*\""

        println ""
        println "Specify extra profilers:"
        println "\tgw jmh -Pprofilers=\"gc,stack\""

        println ""
        println "Prominent profilers:"
        println "\tcomp - JitCompilations, tune your iterations"
        println "\tstack - which methods used most time"
        println "\tgc - print garbage collection stats"
        println "\ths_thr - thread usage"

        println ""
        println "Change report format from JSON to one of [CSV, JSON, NONE, SCSV, TEXT]:"
        println "\tgw jmh -Pformat=csv"

        println ""
        println "Specify JVM arguments:"
        println "\tgw jmh -PjvmArgs=\"-Dtest.cluster=local\""

        println ""
        println "Resources:"
        println "\thttp://tutorials.jenkov.com/java-performance/jmh.html (Introduction)"
        println "\thttp://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/ (Samples)"

    }

}