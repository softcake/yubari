/*
 * Copyright 2018 softcake.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.1.0"
        classpath "gradle.plugin.com.zyxist:chainsaw:0.2.0"
        classpath "com.netflix.nebula:nebula-project-plugin:3.4.1"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
        classpath "ru.vyarus:gradle-pom-plugin:1.2.0"
        classpath "net.nemerosa:versioning:2.6.1"
        classpath "ru.vyarus:gradle-github-info-plugin:1.1.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
        classpath "gradle.plugin.de.gliderpilot.gradle.semantic-release:gradle-semantic-release-plugin:1.4.0"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.6.2"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.7"
        classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16"
//        classpath "com.gradle:build-scan-plugin:1.11"
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.2"
        classpath "gradle.plugin.io.morethan.jmhreport:gradle-jmh-report:0.7.0"
        classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.55"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.17.0"

    }
}

description = "The Yubari Project."

allprojects {

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    apply plugin: "ru.vyarus.github-info"
    github {
        user "softcake"
        license "Apache"
        repository rootProject.name
    }

    group = "${reverseDomain}.${github.repository}"

}

ext {
    junitVintageVersion = "5.1.0"
    junitJupiterVersion = "5.1.0"
    logbackVersion = "1.3.0-alpha4"
    slf4jVersion = "1.8.0-beta1"
}

ext {

    projectModules = getProjectModules()


    publishedModules = projectModules.findAll {
        (it.name in ["yubari.connect",
                     "yubari.transport",
                     "yubari.authentication",
                     "yubari.netty"])
    }

    integTestModules = projectModules.findAll {
        (it.name in [])
    }

    benchmarkModules = projectModules.findAll {
        (it.name in [])
    }

    sonarQubeModules = projectModules

    documentationModule = project(":documentation")

    publishArtifacts = true
    checkCodeQuality = false
    ignoreFailures = true
    mavenSync = false
}


apply plugin: "idea"

apply plugin: "net.nemerosa.versioning"
apply plugin: "de.gliderpilot.semantic-release"
apply plugin: "com.github.ben-manes.versions"

apply from: file("gradle/credentials.gradle")
apply from: file("gradle/compile.gradle")
apply from: file("gradle/properties.gradle")
apply from: file("gradle/idea/idea.gradle")
apply from: file("gradle/sonarqube.gradle")
apply from: file("gradle/publishing.gradle")
apply from: file("gradle/bintray.gradle")
apply from: file("gradle/artifactory.gradle")
apply from: file("gradle/code-quality.gradle")

allprojects {
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        dependencies {
            dependency "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
            dependency "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
            dependency "org.slf4j:slf4j-api:${slf4jVersion}"
            dependency "ch.qos.logback:logback-classic:${logbackVersion}"
            dependency "ch.qos.logback:logback-core:${logbackVersion}"
            dependency "com.google.guava:guava:24.0-jre"
            dependency "commons-validator:commons-validator:1.6"
            dependency "org.softcake.lemon:lemon-core:1.1.0"

 //         dependency "com.dukascopy.dds2:DDS2-jClient-JForex:3.3.0"
            dependency "com.dukascopy.api:JForex-API:2.13.49"
            dependency "com.dukascopy:auth-protocol-client:1.0.16"
            dependency "com.nimbusds:srp6a:1.5.4" //2.0.2
            dependency "org.json:json:20160212" //20180130
            dependency group: 'org.apache.commons', name: 'commons-lang3', version: '3.4' //3.7
            dependency group: 'commons-codec', name: 'commons-codec', version: '1.5' //1.11
//             dependency "com.dukascopy.dds4:netty-transport-client:0.4.84",{
//                 exclude group: "com.dukascopy", module: "dev-tools"
//                 exclude group: "com.dukascopy.dds4", module: "transport-common"
//             }
//
// ,{
//                 exclude group: "com.dukascopy.dds4", module: "transport-common"
//
//             }
            dependency "com.dukascopy.dds2:msg:1.0.199",{
                exclude group: "com.dukascopy", module: "dev-tools"
            }
           dependency "com.dukascopy.dds4:transport-common:0.5.153",{
               exclude group: "com.dukascopy", module: "dev-tools"
           }


           dependency "io.netty:netty-transport:4.1.22.Final"
            dependency "io.netty:netty-handler:4.1.22.Final"
        }
    }
}



subprojects { subProject ->

    if (subProject in projectModules) {

        // common dependencies
        dependencies {
            // JUnit Jupiter API and TestEngine implementation
            testImplementation("org.junit.jupiter:junit-jupiter-api")
            testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
            testImplementation "com.google.guava:guava"
            testImplementation "org.softcake.lemon:lemon-core"

            implementation "com.google.guava:guava"
            // Logging
            implementation "org.slf4j:slf4j-api"
            implementation "ch.qos.logback:logback-classic"
            implementation "ch.qos.logback:logback-core"


  //        implementation "com.dukascopy.dds2:DDS2-jClient-JForex"
            implementation "com.dukascopy:auth-protocol-client"
//           implementation "com.dukascopy.dds4:netty-transport-client",{
//               exclude group: "com.dukascopy", module: "dev-tools"
//               exclude group: "com.dukascopy.dds4", module: "transport-common"
//           }
            implementation "com.dukascopy.api:JForex-API"
          implementation "com.dukascopy.dds4:transport-common",{
              exclude group: "com.dukascopy", module: "dev-tools"
          }
              implementation  "com.dukascopy.dds2:msg",{
                  exclude group: "com.dukascopy", module: "dev-tools"
              }
            implementation "com.nimbusds:srp6a"
            implementation "org.json:json"
            implementation "commons-codec:commons-codec"
            implementation "io.netty:netty-handler"
            implementation "io.netty:netty-transport"
        }

    } else {

        jar.enabled = false
        javadoc.enabled = false
        uploadArchives.enabled = false
        junitPlatformTest.enabled = false
    }

    if (subProject in documentationModule) {

        // common dependencies
        dependencies {
            // JUnit Jupiter API and TestEngine implementation
            testImplementation("org.junit.jupiter:junit-jupiter-api")
            testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

            implementation "com.google.guava:guava"

        }
        jar.enabled = false
        javadoc.enabled = false
        uploadArchives.enabled = false
        junitPlatformTest.enabled = false
    }

    if (subProject in sonarQubeModules) {
        apply from: file("$rootDir/gradle/coverage.gradle")
    }

    if (subProject in integTestModules) {
        apply from: file("$rootDir/gradle/integrationTest.gradle")
    }

    if (project in benchmarkModules) {
        apply from: "$rootDir/gradle/jmh.gradle"
    }

    repositories {
        //jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "http://www.dukascopy.com/client/jforexlib/publicrepo" }
    }

}

private List<Project> getProjectModules() {
    List<Project> projectModules = []
    subprojects.each { project ->
        if (project.name.indexOf(rootProject.name) != -1) {
            projectModules.add(project)
            println("Find published module ${project.name} in root project ${rootProject.name}")
        }
    }
    return projectModules
}

semanticRelease {
    repo {
        ghToken = project.ext.ghToken
    }
}


evaluationDependsOnChildren()
task aggregateJavadocs(type: Javadoc) {

    group JavaBasePlugin.DOCUMENTATION_GROUP

    description = "Generates aggregated Javadocs"
    title = Character.toUpperCase(project.name.charAt(0)).toString() + project.name.substring(1) + " ${version} API"
    def moduleNames = ""

    publishedModules.each { proj ->

        options.group(proj.name, [project.reverseDomain + "." + proj.name + ".*"])
        moduleNames += proj.javaModule.name + ","
        proj.tasks.create("copyModules", Copy) {
            group JavaBasePlugin.BUILD_TASK_NAME
            from 'src/main/java'
            into "$rootProject.buildDir/docscr/${proj.javaModule.name}"
        }
    }

    moduleNames = moduleNames.subSequence(0, moduleNames.length() - 1)

    setDependsOn publishedModules.collect { it.tasks.getByName("copyModules") }
    setSource file("$buildDir/docscr")

    maxMemory = "1024m"
    destinationDir = new File(buildDir, "docs/javadoc")
    classpath = files(publishedModules.collect { it.sourceSets.main.compileClasspath })
    options.stylesheetFile rootProject.file("config/javadoc/softcake.css")
    options.addStringOption('-module', moduleNames)

    options.addStringOption('-module-source-path', "$rootProject.buildDir/docscr/")
    options.addStringOption('-module-path', classpath.asPath)
    options.addStringOption('-html5')
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = rootProject.description
    options.use = true
    options.splitIndex = true
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addMultilineStringsOption('tag').setValue(['apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'])
    options.encoding = 'UTF-8'
    options.jFlags '-Xmx1g'
    options.links(
            'https://docs.oracle.com/javase/9/docs/api/'
    )
}


apply from: file('gradle/ghPages.gradle')
